package main

import (
	"fmt"
	"os"
	"text/tabwriter"
	"time"

	"github.com/runpod/go-tql/sqlfmt"
)

type NamedStruct struct{}

func main() {
	tw := tabwriter.NewWriter(os.Stdout, 2, 4, 4, ' ', 0)
	fmt.Println("generated by sqlfmt/cmd/genexample.go")
	fmt.Println()
	defer tw.Flush()
	loc, err := time.LoadLocation("America/Los_Angeles")
	if err != nil {
		loc = time.Local
	}
	fmt.Fprintf(tw, "TYPE\tIN\tOUT\n")
	fmt.Fprintf(tw, "---\t---\t---\n")
	testcases := []any{
		"string",
		"string needing ' escape",
		"ðŸ”¥string containing UTF-8ðŸ”¥",
		int(-1),
		uint8(1),
		[]byte("some bytes"),
		[]byte("'escape'"),
		[]byte("'escapeutf8ðŸ”¥'"),
		NamedStruct{},
		float32(0.0),
		float64(3.14),
		struct{ S string }{"anonynous struct"},
		int8(0), int16(0), int32(0), int64(0),
		uint8(0), uint16(0), uint32(0), uint64(0), uintptr(0),
		time.Time{}.In(loc),
		time.Time{}.In(time.UTC),
	}

	for _, v := range testcases {
		fmt.Fprintf(tw, "%T\t%#v\t%v\n", v, v, sqlfmt.Sprint(v))
	}
}
